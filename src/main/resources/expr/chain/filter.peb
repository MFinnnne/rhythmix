## ===============  chain filter start ===============
## 过滤数据 符合条件则放行 (Filter data - pass through if conditions are met)
##
## This template generates filter logic that supports two modes:
## 1. Traditional comparison expressions: filter(>20), filter(=="active"), filter([10,50])
## 2. User-defined filter functions: filter(tempFilter()), filter(numericFilter())
##
## Template Variables:
## - funcName: The chain function name (usually "filter")
## - isUDF: Boolean flag indicating if this is a UDF call (true) or comparison expression (false)
## - udfName: Name of the FilterUDF function (only when isUDF=true)
## - stateCode: Generated AviatorScript code for comparison expressions (only when isUDF=false)
## - strict: Boolean flag for strict mode behavior (clears queues on failure)
let chain_{{ funcName }} = lambda()->
    {% if isUDF is not null and isUDF == true %}
    let udf = seq.get(filterUDFMap,"{{ udfName }}");
    {{ debug("udf：{}","udf") }}
    let res = {{ udfName }}.filter(udf,event);

    {% else %}
    ## Traditional comparison expression logic
    let res = {{ stateCode }};
    {% endif %}
    ## ===== DATA ACCEPTANCE AND QUEUE MANAGEMENT =====
    if(res){
        {{ debug("filter() 接收数据：{}","event.value") }}
        queue.push({% var rawChainQueue %},event);

        {% if isUDF is not null and isUDF == true %}
        let udf = seq.get(filterUDFMap,"{{ udfName }}");
        let temp_queue = seq.list();
        {% var rawChainQueue %} = into(temp_queue,{{ udfName }}.filter(udf,{% var rawChainQueue %}));
        {% endif %}
    {% debug "filter queue:{}",rawChainQueue %}
        return true;
    }

    ## ===== STRICT MODE ERROR HANDLING =====
    {% if strict is not null and  strict == true %}
    else {
        {% var chainResult  %} = false;
        queue.clear({% var rawChainQueue %});
        {% if processedChainQueue != nil %}
        queue.clear({% var processedChainQueue %});
        {% endif %}
    }
    {% endif %}

    ## ===== DEFAULT REJECTION LOGIC =====
    return false;
end;
## ===============  chain filter  end  ===============

