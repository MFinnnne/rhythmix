name: Publish to Maven Central

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest

    permissions:
      contents: write # Needed to commit pom.xml changes and upload release assets

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17 and Maven settings
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'
          server-id: Rhythmix # Make sure this matches the id in your settings.xml/pom.xml
          server-username: ${{ secrets.CENTRAL_USERNAME }}
          server-password: ${{ secrets.CENTRAL_TOKEN }}

      # Determine the version from the release tag or manual input
      - name: Extract version
        run: |
          if [ -n "${{ github.event.release.tag_name }}" ]; then
            TAG_NAME="${{ github.event.release.tag_name }}"
            RELEASE_VERSION="$(echo "${TAG_NAME}" | sed 's/^[vV]//')"
          else
            RELEASE_VERSION="${{ github.event.inputs.version }}"
          fi
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

      # Use versions-maven-plugin to update pom.xml
      - name: Set project version in pom.xml
        run: mvn versions:set -DnewVersion=${{ env.RELEASE_VERSION }}
      
      # Configure the Git user that will author the commit.
      - name: Configure Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # Import the GPG key needed for signing commits and artifacts.
      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      # Configure Git to use the imported GPG key for signing commits.
      - name: Configure Git for GPG signing
        run: |
          git config --global user.signingkey ${{ steps.import_gpg.outputs.keyid }}
          git config --global commit.gpgsign true
      
      # This action creates a commit, so it must run after GPG signing is configured.
      - name: Create Pull Request for version update
        uses: peter-evans/create-pull-request@v6
        with:
          # Use a Personal Access Token (PAT) to ensure sufficient permissions.
          token: ${{ secrets.ACTIONS_PAT }}
          commit-message: "chore(release): Set version to ${{ env.RELEASE_VERSION }}"
          title: "Release ${{ env.RELEASE_VERSION }}"
          body: "This PR was automatically created by a GitHub Action to update the project version to `${{ env.RELEASE_VERSION }}`."
          branch: "release/version-${{ env.RELEASE_VERSION }}"
          base: master
          signoff: true

      - name: Build and publish to Maven Central
        run: mvn -B clean deploy central-publishing:publish
        env:
          CENTRAL_TOKEN: ${{ secrets.CENTRAL_TOKEN }}

      # This step attaches the built JAR(s) to the GitHub Release.
      - name: Upload JAR to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # Using a wildcard is more robust than a hardcoded filename.
          files: ./target/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

